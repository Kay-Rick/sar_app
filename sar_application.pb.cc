// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sar_application.proto

#include "sar_application.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
class SAR_Open_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAR_Open_Request> _instance;
} _SAR_Open_Request_default_instance_;
class SAR_Close_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAR_Close_Request> _instance;
} _SAR_Close_Request_default_instance_;
class SAR_ReconstructTime_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAR_ReconstructTime_Request> _instance;
} _SAR_ReconstructTime_Request_default_instance_;
class SAR_Open_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAR_Open_Response> _instance;
} _SAR_Open_Response_default_instance_;
class SAR_Close_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAR_Close_Response> _instance;
} _SAR_Close_Response_default_instance_;
class SAR_ReconstructTime_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SAR_ReconstructTime_Response> _instance;
} _SAR_ReconstructTime_Response_default_instance_;
class DSPControllerRequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DSPControllerRequest> _instance;
} _DSPControllerRequest_default_instance_;
class DSPControllerResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<DSPControllerResponse> _instance;
} _DSPControllerResponse_default_instance_;
class ReconstructTimeResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<ReconstructTimeResponse> _instance;
} _ReconstructTimeResponse_default_instance_;
class NoiseReduction_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoiseReduction_Request> _instance;
} _NoiseReduction_Request_default_instance_;
class NoiseReduction_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<NoiseReduction_Response> _instance;
} _NoiseReduction_Response_default_instance_;
class Feature_Etraction_RequestDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Feature_Etraction_Request> _instance;
} _Feature_Etraction_Request_default_instance_;
class Feature_Etraction_ResponseDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Feature_Etraction_Response> _instance;
} _Feature_Etraction_Response_default_instance_;
static void InitDefaultsscc_info_DSPControllerRequest_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DSPControllerRequest_default_instance_;
    new (ptr) ::DSPControllerRequest();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DSPControllerRequest::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DSPControllerRequest_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DSPControllerRequest_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_DSPControllerResponse_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_DSPControllerResponse_default_instance_;
    new (ptr) ::DSPControllerResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DSPControllerResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_DSPControllerResponse_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_DSPControllerResponse_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_Feature_Etraction_Request_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Feature_Etraction_Request_default_instance_;
    new (ptr) ::Feature_Etraction_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Feature_Etraction_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Feature_Etraction_Request_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Feature_Etraction_Request_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_Feature_Etraction_Response_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_Feature_Etraction_Response_default_instance_;
    new (ptr) ::Feature_Etraction_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::Feature_Etraction_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Feature_Etraction_Response_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Feature_Etraction_Response_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_NoiseReduction_Request_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NoiseReduction_Request_default_instance_;
    new (ptr) ::NoiseReduction_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NoiseReduction_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoiseReduction_Request_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoiseReduction_Request_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_NoiseReduction_Response_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_NoiseReduction_Response_default_instance_;
    new (ptr) ::NoiseReduction_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::NoiseReduction_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_NoiseReduction_Response_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_NoiseReduction_Response_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_ReconstructTimeResponse_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_ReconstructTimeResponse_default_instance_;
    new (ptr) ::ReconstructTimeResponse();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::ReconstructTimeResponse::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_ReconstructTimeResponse_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_ReconstructTimeResponse_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_SAR_Close_Request_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SAR_Close_Request_default_instance_;
    new (ptr) ::SAR_Close_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SAR_Close_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAR_Close_Request_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAR_Close_Request_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_SAR_Close_Response_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SAR_Close_Response_default_instance_;
    new (ptr) ::SAR_Close_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SAR_Close_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAR_Close_Response_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAR_Close_Response_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_SAR_Open_Request_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SAR_Open_Request_default_instance_;
    new (ptr) ::SAR_Open_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SAR_Open_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAR_Open_Request_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAR_Open_Request_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_SAR_Open_Response_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SAR_Open_Response_default_instance_;
    new (ptr) ::SAR_Open_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SAR_Open_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAR_Open_Response_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAR_Open_Response_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_SAR_ReconstructTime_Request_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SAR_ReconstructTime_Request_default_instance_;
    new (ptr) ::SAR_ReconstructTime_Request();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SAR_ReconstructTime_Request::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAR_ReconstructTime_Request_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAR_ReconstructTime_Request_sar_5fapplication_2eproto}, {}};

static void InitDefaultsscc_info_SAR_ReconstructTime_Response_sar_5fapplication_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::_SAR_ReconstructTime_Response_default_instance_;
    new (ptr) ::SAR_ReconstructTime_Response();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::SAR_ReconstructTime_Response::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_SAR_ReconstructTime_Response_sar_5fapplication_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_SAR_ReconstructTime_Response_sar_5fapplication_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_sar_5fapplication_2eproto[13];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_sar_5fapplication_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_sar_5fapplication_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_sar_5fapplication_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SAR_Open_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SAR_Open_Request, opertemode_),
  PROTOBUF_FIELD_OFFSET(::SAR_Open_Request, aperturelength_),
  PROTOBUF_FIELD_OFFSET(::SAR_Open_Request, winnumer_),
  PROTOBUF_FIELD_OFFSET(::SAR_Open_Request, gatethreshold_),
  PROTOBUF_FIELD_OFFSET(::SAR_Open_Request, longitude_),
  PROTOBUF_FIELD_OFFSET(::SAR_Open_Request, latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SAR_Close_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SAR_ReconstructTime_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SAR_Open_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SAR_Close_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::SAR_ReconstructTime_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::SAR_ReconstructTime_Response, task1_),
  PROTOBUF_FIELD_OFFSET(::SAR_ReconstructTime_Response, task2_),
  PROTOBUF_FIELD_OFFSET(::SAR_ReconstructTime_Response, hardwareid_),
  PROTOBUF_FIELD_OFFSET(::SAR_ReconstructTime_Response, timelen_),
  PROTOBUF_FIELD_OFFSET(::SAR_ReconstructTime_Response, param1_),
  PROTOBUF_FIELD_OFFSET(::SAR_ReconstructTime_Response, param2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DSPControllerRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DSPControllerResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ReconstructTimeResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::ReconstructTimeResponse, time_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NoiseReduction_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NoiseReduction_Request, longitude_),
  PROTOBUF_FIELD_OFFSET(::NoiseReduction_Request, latitude_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NoiseReduction_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::NoiseReduction_Response, longitude_),
  PROTOBUF_FIELD_OFFSET(::NoiseReduction_Response, latitude_),
  PROTOBUF_FIELD_OFFSET(::NoiseReduction_Response, image_vector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Feature_Etraction_Request, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::Feature_Etraction_Request, longitude_),
  PROTOBUF_FIELD_OFFSET(::Feature_Etraction_Request, latitude_),
  PROTOBUF_FIELD_OFFSET(::Feature_Etraction_Request, image_vector_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Feature_Etraction_Response, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::SAR_Open_Request)},
  { 11, -1, sizeof(::SAR_Close_Request)},
  { 16, -1, sizeof(::SAR_ReconstructTime_Request)},
  { 21, -1, sizeof(::SAR_Open_Response)},
  { 26, -1, sizeof(::SAR_Close_Response)},
  { 31, -1, sizeof(::SAR_ReconstructTime_Response)},
  { 42, -1, sizeof(::DSPControllerRequest)},
  { 47, -1, sizeof(::DSPControllerResponse)},
  { 52, -1, sizeof(::ReconstructTimeResponse)},
  { 58, -1, sizeof(::NoiseReduction_Request)},
  { 65, -1, sizeof(::NoiseReduction_Response)},
  { 73, -1, sizeof(::Feature_Etraction_Request)},
  { 81, -1, sizeof(::Feature_Etraction_Response)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SAR_Open_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SAR_Close_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SAR_ReconstructTime_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SAR_Open_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SAR_Close_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_SAR_ReconstructTime_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DSPControllerRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_DSPControllerResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ReconstructTimeResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NoiseReduction_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NoiseReduction_Response_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Feature_Etraction_Request_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Feature_Etraction_Response_default_instance_),
};

const char descriptor_table_protodef_sar_5fapplication_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\025sar_application.proto\"\214\001\n\020SAR_Open_Req"
  "uest\022\022\n\noperteMode\030\001 \001(\005\022\026\n\016apertureLeng"
  "th\030\002 \001(\005\022\020\n\010winNumer\030\003 \001(\005\022\025\n\rgateThresh"
  "old\030\004 \001(\005\022\021\n\tlongitude\030\005 \001(\002\022\020\n\010latitude"
  "\030\006 \001(\002\"\023\n\021SAR_Close_Request\"\035\n\033SAR_Recon"
  "structTime_Request\"\023\n\021SAR_Open_Response\""
  "\024\n\022SAR_Close_Response\"\201\001\n\034SAR_Reconstruc"
  "tTime_Response\022\r\n\005task1\030\001 \001(\r\022\r\n\005task2\030\002"
  " \001(\r\022\022\n\nhardwareid\030\003 \001(\r\022\017\n\007timelen\030\004 \001("
  "\002\022\016\n\006param1\030\005 \001(\002\022\016\n\006param2\030\006 \001(\002\"\026\n\024DSP"
  "ControllerRequest\"\027\n\025DSPControllerRespon"
  "se\"\'\n\027ReconstructTimeResponse\022\014\n\004time\030\001 "
  "\001(\002\"=\n\026NoiseReduction_Request\022\021\n\tlongitu"
  "de\030\001 \001(\002\022\020\n\010latitude\030\002 \001(\002\"T\n\027NoiseReduc"
  "tion_Response\022\021\n\tlongitude\030\001 \001(\002\022\020\n\010lati"
  "tude\030\002 \001(\002\022\024\n\014image_vector\030\003 \001(\014\"V\n\031Feat"
  "ure_Etraction_Request\022\021\n\tlongitude\030\001 \001(\002"
  "\022\020\n\010latitude\030\002 \001(\002\022\024\n\014image_vector\030\003 \001(\014"
  "\"\034\n\032Feature_Etraction_Response2\333\001\n\003SAR\022;"
  "\n\022SAR_Open_Interface\022\021.SAR_Open_Request\032"
  "\022.SAR_Open_Response\022>\n\023SAR_Close_Interfa"
  "ce\022\022.SAR_Close_Request\032\023.SAR_Close_Respo"
  "nse\022W\n\030SAR_Get_Reconstruct_Time\022\034.SAR_Re"
  "constructTime_Request\032\035.SAR_ReconstructT"
  "ime_Response2\320\002\n\rDSPController\022;\n\nLoadSa"
  "rApp\022\025.DSPControllerRequest\032\026.DSPControl"
  "lerResponse\022<\n\013StartSarApp\022\025.DSPControll"
  "erRequest\032\026.DSPControllerResponse\022;\n\nSto"
  "pSarApp\022\025.DSPControllerRequest\032\026.DSPCont"
  "rollerResponse\022=\n\014SwitchSarApp\022\025.DSPCont"
  "rollerRequest\032\026.DSPControllerResponse\022H\n"
  "\025GetSarReconstructTime\022\025.DSPControllerRe"
  "quest\032\030.ReconstructTimeResponse2\262\001\n\034SAR_"
  "iamge_processing_service\022D\n\017noise_reduct"
  "ion\022\027.NoiseReduction_Request\032\030.NoiseRedu"
  "ction_Response\022L\n\021feature_etraction\022\032.Fe"
  "ature_Etraction_Request\032\033.Feature_Etract"
  "ion_Responseb\006proto3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_sar_5fapplication_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_sar_5fapplication_2eproto_sccs[13] = {
  &scc_info_DSPControllerRequest_sar_5fapplication_2eproto.base,
  &scc_info_DSPControllerResponse_sar_5fapplication_2eproto.base,
  &scc_info_Feature_Etraction_Request_sar_5fapplication_2eproto.base,
  &scc_info_Feature_Etraction_Response_sar_5fapplication_2eproto.base,
  &scc_info_NoiseReduction_Request_sar_5fapplication_2eproto.base,
  &scc_info_NoiseReduction_Response_sar_5fapplication_2eproto.base,
  &scc_info_ReconstructTimeResponse_sar_5fapplication_2eproto.base,
  &scc_info_SAR_Close_Request_sar_5fapplication_2eproto.base,
  &scc_info_SAR_Close_Response_sar_5fapplication_2eproto.base,
  &scc_info_SAR_Open_Request_sar_5fapplication_2eproto.base,
  &scc_info_SAR_Open_Response_sar_5fapplication_2eproto.base,
  &scc_info_SAR_ReconstructTime_Request_sar_5fapplication_2eproto.base,
  &scc_info_SAR_ReconstructTime_Response_sar_5fapplication_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_sar_5fapplication_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sar_5fapplication_2eproto = {
  false, false, descriptor_table_protodef_sar_5fapplication_2eproto, "sar_application.proto", 1500,
  &descriptor_table_sar_5fapplication_2eproto_once, descriptor_table_sar_5fapplication_2eproto_sccs, descriptor_table_sar_5fapplication_2eproto_deps, 13, 0,
  schemas, file_default_instances, TableStruct_sar_5fapplication_2eproto::offsets,
  file_level_metadata_sar_5fapplication_2eproto, 13, file_level_enum_descriptors_sar_5fapplication_2eproto, file_level_service_descriptors_sar_5fapplication_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_sar_5fapplication_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_sar_5fapplication_2eproto)), true);

// ===================================================================

void SAR_Open_Request::InitAsDefaultInstance() {
}
class SAR_Open_Request::_Internal {
 public:
};

SAR_Open_Request::SAR_Open_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SAR_Open_Request)
}
SAR_Open_Request::SAR_Open_Request(const SAR_Open_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&opertemode_, &from.opertemode_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&opertemode_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:SAR_Open_Request)
}

void SAR_Open_Request::SharedCtor() {
  ::memset(&opertemode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&opertemode_)) + sizeof(latitude_));
}

SAR_Open_Request::~SAR_Open_Request() {
  // @@protoc_insertion_point(destructor:SAR_Open_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SAR_Open_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SAR_Open_Request::ArenaDtor(void* object) {
  SAR_Open_Request* _this = reinterpret_cast< SAR_Open_Request* >(object);
  (void)_this;
}
void SAR_Open_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SAR_Open_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAR_Open_Request& SAR_Open_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAR_Open_Request_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void SAR_Open_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SAR_Open_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&opertemode_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&opertemode_)) + sizeof(latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SAR_Open_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 operteMode = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          opertemode_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 apertureLength = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          aperturelength_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 winNumer = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          winnumer_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 gateThreshold = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          gatethreshold_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float longitude = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latitude = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAR_Open_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAR_Open_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 operteMode = 1;
  if (this->opertemode() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_opertemode(), target);
  }

  // int32 apertureLength = 2;
  if (this->aperturelength() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_aperturelength(), target);
  }

  // int32 winNumer = 3;
  if (this->winnumer() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_winnumer(), target);
  }

  // int32 gateThreshold = 4;
  if (this->gatethreshold() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_gatethreshold(), target);
  }

  // float longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_longitude(), target);
  }

  // float latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAR_Open_Request)
  return target;
}

size_t SAR_Open_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SAR_Open_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 operteMode = 1;
  if (this->opertemode() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_opertemode());
  }

  // int32 apertureLength = 2;
  if (this->aperturelength() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_aperturelength());
  }

  // int32 winNumer = 3;
  if (this->winnumer() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_winnumer());
  }

  // int32 gateThreshold = 4;
  if (this->gatethreshold() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_gatethreshold());
  }

  // float longitude = 5;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float latitude = 6;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAR_Open_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SAR_Open_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SAR_Open_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAR_Open_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SAR_Open_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SAR_Open_Request)
    MergeFrom(*source);
  }
}

void SAR_Open_Request::MergeFrom(const SAR_Open_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SAR_Open_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.opertemode() != 0) {
    _internal_set_opertemode(from._internal_opertemode());
  }
  if (from.aperturelength() != 0) {
    _internal_set_aperturelength(from._internal_aperturelength());
  }
  if (from.winnumer() != 0) {
    _internal_set_winnumer(from._internal_winnumer());
  }
  if (from.gatethreshold() != 0) {
    _internal_set_gatethreshold(from._internal_gatethreshold());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
}

void SAR_Open_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SAR_Open_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAR_Open_Request::CopyFrom(const SAR_Open_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SAR_Open_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAR_Open_Request::IsInitialized() const {
  return true;
}

void SAR_Open_Request::InternalSwap(SAR_Open_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SAR_Open_Request, latitude_)
      + sizeof(SAR_Open_Request::latitude_)
      - PROTOBUF_FIELD_OFFSET(SAR_Open_Request, opertemode_)>(
          reinterpret_cast<char*>(&opertemode_),
          reinterpret_cast<char*>(&other->opertemode_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SAR_Open_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAR_Close_Request::InitAsDefaultInstance() {
}
class SAR_Close_Request::_Internal {
 public:
};

SAR_Close_Request::SAR_Close_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SAR_Close_Request)
}
SAR_Close_Request::SAR_Close_Request(const SAR_Close_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SAR_Close_Request)
}

void SAR_Close_Request::SharedCtor() {
}

SAR_Close_Request::~SAR_Close_Request() {
  // @@protoc_insertion_point(destructor:SAR_Close_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SAR_Close_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SAR_Close_Request::ArenaDtor(void* object) {
  SAR_Close_Request* _this = reinterpret_cast< SAR_Close_Request* >(object);
  (void)_this;
}
void SAR_Close_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SAR_Close_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAR_Close_Request& SAR_Close_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAR_Close_Request_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void SAR_Close_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SAR_Close_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SAR_Close_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAR_Close_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAR_Close_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAR_Close_Request)
  return target;
}

size_t SAR_Close_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SAR_Close_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAR_Close_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SAR_Close_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SAR_Close_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAR_Close_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SAR_Close_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SAR_Close_Request)
    MergeFrom(*source);
  }
}

void SAR_Close_Request::MergeFrom(const SAR_Close_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SAR_Close_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SAR_Close_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SAR_Close_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAR_Close_Request::CopyFrom(const SAR_Close_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SAR_Close_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAR_Close_Request::IsInitialized() const {
  return true;
}

void SAR_Close_Request::InternalSwap(SAR_Close_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAR_Close_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAR_ReconstructTime_Request::InitAsDefaultInstance() {
}
class SAR_ReconstructTime_Request::_Internal {
 public:
};

SAR_ReconstructTime_Request::SAR_ReconstructTime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SAR_ReconstructTime_Request)
}
SAR_ReconstructTime_Request::SAR_ReconstructTime_Request(const SAR_ReconstructTime_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SAR_ReconstructTime_Request)
}

void SAR_ReconstructTime_Request::SharedCtor() {
}

SAR_ReconstructTime_Request::~SAR_ReconstructTime_Request() {
  // @@protoc_insertion_point(destructor:SAR_ReconstructTime_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SAR_ReconstructTime_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SAR_ReconstructTime_Request::ArenaDtor(void* object) {
  SAR_ReconstructTime_Request* _this = reinterpret_cast< SAR_ReconstructTime_Request* >(object);
  (void)_this;
}
void SAR_ReconstructTime_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SAR_ReconstructTime_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAR_ReconstructTime_Request& SAR_ReconstructTime_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAR_ReconstructTime_Request_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void SAR_ReconstructTime_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:SAR_ReconstructTime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SAR_ReconstructTime_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAR_ReconstructTime_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAR_ReconstructTime_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAR_ReconstructTime_Request)
  return target;
}

size_t SAR_ReconstructTime_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SAR_ReconstructTime_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAR_ReconstructTime_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SAR_ReconstructTime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const SAR_ReconstructTime_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAR_ReconstructTime_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SAR_ReconstructTime_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SAR_ReconstructTime_Request)
    MergeFrom(*source);
  }
}

void SAR_ReconstructTime_Request::MergeFrom(const SAR_ReconstructTime_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SAR_ReconstructTime_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SAR_ReconstructTime_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SAR_ReconstructTime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAR_ReconstructTime_Request::CopyFrom(const SAR_ReconstructTime_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SAR_ReconstructTime_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAR_ReconstructTime_Request::IsInitialized() const {
  return true;
}

void SAR_ReconstructTime_Request::InternalSwap(SAR_ReconstructTime_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAR_ReconstructTime_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAR_Open_Response::InitAsDefaultInstance() {
}
class SAR_Open_Response::_Internal {
 public:
};

SAR_Open_Response::SAR_Open_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SAR_Open_Response)
}
SAR_Open_Response::SAR_Open_Response(const SAR_Open_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SAR_Open_Response)
}

void SAR_Open_Response::SharedCtor() {
}

SAR_Open_Response::~SAR_Open_Response() {
  // @@protoc_insertion_point(destructor:SAR_Open_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SAR_Open_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SAR_Open_Response::ArenaDtor(void* object) {
  SAR_Open_Response* _this = reinterpret_cast< SAR_Open_Response* >(object);
  (void)_this;
}
void SAR_Open_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SAR_Open_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAR_Open_Response& SAR_Open_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAR_Open_Response_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void SAR_Open_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SAR_Open_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SAR_Open_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAR_Open_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAR_Open_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAR_Open_Response)
  return target;
}

size_t SAR_Open_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SAR_Open_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAR_Open_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SAR_Open_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SAR_Open_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAR_Open_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SAR_Open_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SAR_Open_Response)
    MergeFrom(*source);
  }
}

void SAR_Open_Response::MergeFrom(const SAR_Open_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SAR_Open_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SAR_Open_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SAR_Open_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAR_Open_Response::CopyFrom(const SAR_Open_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SAR_Open_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAR_Open_Response::IsInitialized() const {
  return true;
}

void SAR_Open_Response::InternalSwap(SAR_Open_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAR_Open_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAR_Close_Response::InitAsDefaultInstance() {
}
class SAR_Close_Response::_Internal {
 public:
};

SAR_Close_Response::SAR_Close_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SAR_Close_Response)
}
SAR_Close_Response::SAR_Close_Response(const SAR_Close_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:SAR_Close_Response)
}

void SAR_Close_Response::SharedCtor() {
}

SAR_Close_Response::~SAR_Close_Response() {
  // @@protoc_insertion_point(destructor:SAR_Close_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SAR_Close_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SAR_Close_Response::ArenaDtor(void* object) {
  SAR_Close_Response* _this = reinterpret_cast< SAR_Close_Response* >(object);
  (void)_this;
}
void SAR_Close_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SAR_Close_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAR_Close_Response& SAR_Close_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAR_Close_Response_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void SAR_Close_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SAR_Close_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SAR_Close_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAR_Close_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAR_Close_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAR_Close_Response)
  return target;
}

size_t SAR_Close_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SAR_Close_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAR_Close_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SAR_Close_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SAR_Close_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAR_Close_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SAR_Close_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SAR_Close_Response)
    MergeFrom(*source);
  }
}

void SAR_Close_Response::MergeFrom(const SAR_Close_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SAR_Close_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void SAR_Close_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SAR_Close_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAR_Close_Response::CopyFrom(const SAR_Close_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SAR_Close_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAR_Close_Response::IsInitialized() const {
  return true;
}

void SAR_Close_Response::InternalSwap(SAR_Close_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SAR_Close_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SAR_ReconstructTime_Response::InitAsDefaultInstance() {
}
class SAR_ReconstructTime_Response::_Internal {
 public:
};

SAR_ReconstructTime_Response::SAR_ReconstructTime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:SAR_ReconstructTime_Response)
}
SAR_ReconstructTime_Response::SAR_ReconstructTime_Response(const SAR_ReconstructTime_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&task1_, &from.task1_,
    static_cast<size_t>(reinterpret_cast<char*>(&param2_) -
    reinterpret_cast<char*>(&task1_)) + sizeof(param2_));
  // @@protoc_insertion_point(copy_constructor:SAR_ReconstructTime_Response)
}

void SAR_ReconstructTime_Response::SharedCtor() {
  ::memset(&task1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param2_) -
      reinterpret_cast<char*>(&task1_)) + sizeof(param2_));
}

SAR_ReconstructTime_Response::~SAR_ReconstructTime_Response() {
  // @@protoc_insertion_point(destructor:SAR_ReconstructTime_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SAR_ReconstructTime_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void SAR_ReconstructTime_Response::ArenaDtor(void* object) {
  SAR_ReconstructTime_Response* _this = reinterpret_cast< SAR_ReconstructTime_Response* >(object);
  (void)_this;
}
void SAR_ReconstructTime_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SAR_ReconstructTime_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SAR_ReconstructTime_Response& SAR_ReconstructTime_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SAR_ReconstructTime_Response_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void SAR_ReconstructTime_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:SAR_ReconstructTime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&task1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&param2_) -
      reinterpret_cast<char*>(&task1_)) + sizeof(param2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SAR_ReconstructTime_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // uint32 task1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          task1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 task2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          task2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // uint32 hardwareid = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          hardwareid_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float timelen = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          timelen_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param1 = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          param1_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float param2 = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          param2_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SAR_ReconstructTime_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:SAR_ReconstructTime_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 task1 = 1;
  if (this->task1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_task1(), target);
  }

  // uint32 task2 = 2;
  if (this->task2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(2, this->_internal_task2(), target);
  }

  // uint32 hardwareid = 3;
  if (this->hardwareid() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_hardwareid(), target);
  }

  // float timelen = 4;
  if (!(this->timelen() <= 0 && this->timelen() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_timelen(), target);
  }

  // float param1 = 5;
  if (!(this->param1() <= 0 && this->param1() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_param1(), target);
  }

  // float param2 = 6;
  if (!(this->param2() <= 0 && this->param2() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_param2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:SAR_ReconstructTime_Response)
  return target;
}

size_t SAR_ReconstructTime_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:SAR_ReconstructTime_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 task1 = 1;
  if (this->task1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task1());
  }

  // uint32 task2 = 2;
  if (this->task2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_task2());
  }

  // uint32 hardwareid = 3;
  if (this->hardwareid() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32Size(
        this->_internal_hardwareid());
  }

  // float timelen = 4;
  if (!(this->timelen() <= 0 && this->timelen() >= 0)) {
    total_size += 1 + 4;
  }

  // float param1 = 5;
  if (!(this->param1() <= 0 && this->param1() >= 0)) {
    total_size += 1 + 4;
  }

  // float param2 = 6;
  if (!(this->param2() <= 0 && this->param2() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SAR_ReconstructTime_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:SAR_ReconstructTime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const SAR_ReconstructTime_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SAR_ReconstructTime_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:SAR_ReconstructTime_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:SAR_ReconstructTime_Response)
    MergeFrom(*source);
  }
}

void SAR_ReconstructTime_Response::MergeFrom(const SAR_ReconstructTime_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:SAR_ReconstructTime_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.task1() != 0) {
    _internal_set_task1(from._internal_task1());
  }
  if (from.task2() != 0) {
    _internal_set_task2(from._internal_task2());
  }
  if (from.hardwareid() != 0) {
    _internal_set_hardwareid(from._internal_hardwareid());
  }
  if (!(from.timelen() <= 0 && from.timelen() >= 0)) {
    _internal_set_timelen(from._internal_timelen());
  }
  if (!(from.param1() <= 0 && from.param1() >= 0)) {
    _internal_set_param1(from._internal_param1());
  }
  if (!(from.param2() <= 0 && from.param2() >= 0)) {
    _internal_set_param2(from._internal_param2());
  }
}

void SAR_ReconstructTime_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:SAR_ReconstructTime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SAR_ReconstructTime_Response::CopyFrom(const SAR_ReconstructTime_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:SAR_ReconstructTime_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SAR_ReconstructTime_Response::IsInitialized() const {
  return true;
}

void SAR_ReconstructTime_Response::InternalSwap(SAR_ReconstructTime_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SAR_ReconstructTime_Response, param2_)
      + sizeof(SAR_ReconstructTime_Response::param2_)
      - PROTOBUF_FIELD_OFFSET(SAR_ReconstructTime_Response, task1_)>(
          reinterpret_cast<char*>(&task1_),
          reinterpret_cast<char*>(&other->task1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SAR_ReconstructTime_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DSPControllerRequest::InitAsDefaultInstance() {
}
class DSPControllerRequest::_Internal {
 public:
};

DSPControllerRequest::DSPControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DSPControllerRequest)
}
DSPControllerRequest::DSPControllerRequest(const DSPControllerRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DSPControllerRequest)
}

void DSPControllerRequest::SharedCtor() {
}

DSPControllerRequest::~DSPControllerRequest() {
  // @@protoc_insertion_point(destructor:DSPControllerRequest)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DSPControllerRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DSPControllerRequest::ArenaDtor(void* object) {
  DSPControllerRequest* _this = reinterpret_cast< DSPControllerRequest* >(object);
  (void)_this;
}
void DSPControllerRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DSPControllerRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DSPControllerRequest& DSPControllerRequest::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DSPControllerRequest_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void DSPControllerRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:DSPControllerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DSPControllerRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DSPControllerRequest::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DSPControllerRequest)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DSPControllerRequest)
  return target;
}

size_t DSPControllerRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DSPControllerRequest)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DSPControllerRequest::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DSPControllerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  const DSPControllerRequest* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DSPControllerRequest>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DSPControllerRequest)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DSPControllerRequest)
    MergeFrom(*source);
  }
}

void DSPControllerRequest::MergeFrom(const DSPControllerRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DSPControllerRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DSPControllerRequest::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DSPControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSPControllerRequest::CopyFrom(const DSPControllerRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DSPControllerRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSPControllerRequest::IsInitialized() const {
  return true;
}

void DSPControllerRequest::InternalSwap(DSPControllerRequest* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DSPControllerRequest::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void DSPControllerResponse::InitAsDefaultInstance() {
}
class DSPControllerResponse::_Internal {
 public:
};

DSPControllerResponse::DSPControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DSPControllerResponse)
}
DSPControllerResponse::DSPControllerResponse(const DSPControllerResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DSPControllerResponse)
}

void DSPControllerResponse::SharedCtor() {
}

DSPControllerResponse::~DSPControllerResponse() {
  // @@protoc_insertion_point(destructor:DSPControllerResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void DSPControllerResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void DSPControllerResponse::ArenaDtor(void* object) {
  DSPControllerResponse* _this = reinterpret_cast< DSPControllerResponse* >(object);
  (void)_this;
}
void DSPControllerResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DSPControllerResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DSPControllerResponse& DSPControllerResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_DSPControllerResponse_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void DSPControllerResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:DSPControllerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DSPControllerResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* DSPControllerResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DSPControllerResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DSPControllerResponse)
  return target;
}

size_t DSPControllerResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DSPControllerResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DSPControllerResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DSPControllerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const DSPControllerResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<DSPControllerResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DSPControllerResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DSPControllerResponse)
    MergeFrom(*source);
  }
}

void DSPControllerResponse::MergeFrom(const DSPControllerResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DSPControllerResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void DSPControllerResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DSPControllerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DSPControllerResponse::CopyFrom(const DSPControllerResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DSPControllerResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DSPControllerResponse::IsInitialized() const {
  return true;
}

void DSPControllerResponse::InternalSwap(DSPControllerResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DSPControllerResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void ReconstructTimeResponse::InitAsDefaultInstance() {
}
class ReconstructTimeResponse::_Internal {
 public:
};

ReconstructTimeResponse::ReconstructTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:ReconstructTimeResponse)
}
ReconstructTimeResponse::ReconstructTimeResponse(const ReconstructTimeResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  time_ = from.time_;
  // @@protoc_insertion_point(copy_constructor:ReconstructTimeResponse)
}

void ReconstructTimeResponse::SharedCtor() {
  time_ = 0;
}

ReconstructTimeResponse::~ReconstructTimeResponse() {
  // @@protoc_insertion_point(destructor:ReconstructTimeResponse)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void ReconstructTimeResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void ReconstructTimeResponse::ArenaDtor(void* object) {
  ReconstructTimeResponse* _this = reinterpret_cast< ReconstructTimeResponse* >(object);
  (void)_this;
}
void ReconstructTimeResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ReconstructTimeResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const ReconstructTimeResponse& ReconstructTimeResponse::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_ReconstructTimeResponse_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void ReconstructTimeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:ReconstructTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  time_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ReconstructTimeResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float time = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          time_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* ReconstructTimeResponse::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ReconstructTimeResponse)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_time(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ReconstructTimeResponse)
  return target;
}

size_t ReconstructTimeResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ReconstructTimeResponse)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float time = 1;
  if (!(this->time() <= 0 && this->time() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void ReconstructTimeResponse::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ReconstructTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  const ReconstructTimeResponse* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<ReconstructTimeResponse>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ReconstructTimeResponse)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ReconstructTimeResponse)
    MergeFrom(*source);
  }
}

void ReconstructTimeResponse::MergeFrom(const ReconstructTimeResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ReconstructTimeResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.time() <= 0 && from.time() >= 0)) {
    _internal_set_time(from._internal_time());
  }
}

void ReconstructTimeResponse::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ReconstructTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReconstructTimeResponse::CopyFrom(const ReconstructTimeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ReconstructTimeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReconstructTimeResponse::IsInitialized() const {
  return true;
}

void ReconstructTimeResponse::InternalSwap(ReconstructTimeResponse* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  swap(time_, other->time_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ReconstructTimeResponse::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoiseReduction_Request::InitAsDefaultInstance() {
}
class NoiseReduction_Request::_Internal {
 public:
};

NoiseReduction_Request::NoiseReduction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NoiseReduction_Request)
}
NoiseReduction_Request::NoiseReduction_Request(const NoiseReduction_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:NoiseReduction_Request)
}

void NoiseReduction_Request::SharedCtor() {
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

NoiseReduction_Request::~NoiseReduction_Request() {
  // @@protoc_insertion_point(destructor:NoiseReduction_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NoiseReduction_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void NoiseReduction_Request::ArenaDtor(void* object) {
  NoiseReduction_Request* _this = reinterpret_cast< NoiseReduction_Request* >(object);
  (void)_this;
}
void NoiseReduction_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoiseReduction_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoiseReduction_Request& NoiseReduction_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoiseReduction_Request_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void NoiseReduction_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:NoiseReduction_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoiseReduction_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoiseReduction_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NoiseReduction_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude(), target);
  }

  // float latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_latitude(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NoiseReduction_Request)
  return target;
}

size_t NoiseReduction_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NoiseReduction_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoiseReduction_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NoiseReduction_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const NoiseReduction_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoiseReduction_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NoiseReduction_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NoiseReduction_Request)
    MergeFrom(*source);
  }
}

void NoiseReduction_Request::MergeFrom(const NoiseReduction_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NoiseReduction_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
}

void NoiseReduction_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NoiseReduction_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseReduction_Request::CopyFrom(const NoiseReduction_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NoiseReduction_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseReduction_Request::IsInitialized() const {
  return true;
}

void NoiseReduction_Request::InternalSwap(NoiseReduction_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoiseReduction_Request, latitude_)
      + sizeof(NoiseReduction_Request::latitude_)
      - PROTOBUF_FIELD_OFFSET(NoiseReduction_Request, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoiseReduction_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void NoiseReduction_Response::InitAsDefaultInstance() {
}
class NoiseReduction_Response::_Internal {
 public:
};

NoiseReduction_Response::NoiseReduction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:NoiseReduction_Response)
}
NoiseReduction_Response::NoiseReduction_Response(const NoiseReduction_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_vector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_vector().empty()) {
    image_vector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_vector(),
      GetArena());
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:NoiseReduction_Response)
}

void NoiseReduction_Response::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_NoiseReduction_Response_sar_5fapplication_2eproto.base);
  image_vector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

NoiseReduction_Response::~NoiseReduction_Response() {
  // @@protoc_insertion_point(destructor:NoiseReduction_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void NoiseReduction_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_vector_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void NoiseReduction_Response::ArenaDtor(void* object) {
  NoiseReduction_Response* _this = reinterpret_cast< NoiseReduction_Response* >(object);
  (void)_this;
}
void NoiseReduction_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NoiseReduction_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const NoiseReduction_Response& NoiseReduction_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_NoiseReduction_Response_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void NoiseReduction_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:NoiseReduction_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_vector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NoiseReduction_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes image_vector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image_vector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* NoiseReduction_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NoiseReduction_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude(), target);
  }

  // float latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_latitude(), target);
  }

  // bytes image_vector = 3;
  if (this->image_vector().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_image_vector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NoiseReduction_Response)
  return target;
}

size_t NoiseReduction_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NoiseReduction_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image_vector = 3;
  if (this->image_vector().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image_vector());
  }

  // float longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void NoiseReduction_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:NoiseReduction_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const NoiseReduction_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<NoiseReduction_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:NoiseReduction_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:NoiseReduction_Response)
    MergeFrom(*source);
  }
}

void NoiseReduction_Response::MergeFrom(const NoiseReduction_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NoiseReduction_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_vector().size() > 0) {
    _internal_set_image_vector(from._internal_image_vector());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
}

void NoiseReduction_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:NoiseReduction_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoiseReduction_Response::CopyFrom(const NoiseReduction_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NoiseReduction_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoiseReduction_Response::IsInitialized() const {
  return true;
}

void NoiseReduction_Response::InternalSwap(NoiseReduction_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_vector_.Swap(&other->image_vector_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(NoiseReduction_Response, latitude_)
      + sizeof(NoiseReduction_Response::latitude_)
      - PROTOBUF_FIELD_OFFSET(NoiseReduction_Response, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata NoiseReduction_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Feature_Etraction_Request::InitAsDefaultInstance() {
}
class Feature_Etraction_Request::_Internal {
 public:
};

Feature_Etraction_Request::Feature_Etraction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Feature_Etraction_Request)
}
Feature_Etraction_Request::Feature_Etraction_Request(const Feature_Etraction_Request& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  image_vector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_image_vector().empty()) {
    image_vector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_image_vector(),
      GetArena());
  }
  ::memcpy(&longitude_, &from.longitude_,
    static_cast<size_t>(reinterpret_cast<char*>(&latitude_) -
    reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  // @@protoc_insertion_point(copy_constructor:Feature_Etraction_Request)
}

void Feature_Etraction_Request::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Feature_Etraction_Request_sar_5fapplication_2eproto.base);
  image_vector_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
}

Feature_Etraction_Request::~Feature_Etraction_Request() {
  // @@protoc_insertion_point(destructor:Feature_Etraction_Request)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Feature_Etraction_Request::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  image_vector_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Feature_Etraction_Request::ArenaDtor(void* object) {
  Feature_Etraction_Request* _this = reinterpret_cast< Feature_Etraction_Request* >(object);
  (void)_this;
}
void Feature_Etraction_Request::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Feature_Etraction_Request::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feature_Etraction_Request& Feature_Etraction_Request::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Feature_Etraction_Request_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void Feature_Etraction_Request::Clear() {
// @@protoc_insertion_point(message_clear_start:Feature_Etraction_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  image_vector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::memset(&longitude_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&latitude_) -
      reinterpret_cast<char*>(&longitude_)) + sizeof(latitude_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature_Etraction_Request::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float longitude = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          longitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float latitude = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          latitude_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // bytes image_vector = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          auto str = _internal_mutable_image_vector();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feature_Etraction_Request::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Feature_Etraction_Request)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_longitude(), target);
  }

  // float latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_latitude(), target);
  }

  // bytes image_vector = 3;
  if (this->image_vector().size() > 0) {
    target = stream->WriteBytesMaybeAliased(
        3, this->_internal_image_vector(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Feature_Etraction_Request)
  return target;
}

size_t Feature_Etraction_Request::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Feature_Etraction_Request)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // bytes image_vector = 3;
  if (this->image_vector().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::BytesSize(
        this->_internal_image_vector());
  }

  // float longitude = 1;
  if (!(this->longitude() <= 0 && this->longitude() >= 0)) {
    total_size += 1 + 4;
  }

  // float latitude = 2;
  if (!(this->latitude() <= 0 && this->latitude() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature_Etraction_Request::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Feature_Etraction_Request)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature_Etraction_Request* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Feature_Etraction_Request>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Feature_Etraction_Request)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Feature_Etraction_Request)
    MergeFrom(*source);
  }
}

void Feature_Etraction_Request::MergeFrom(const Feature_Etraction_Request& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Feature_Etraction_Request)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.image_vector().size() > 0) {
    _internal_set_image_vector(from._internal_image_vector());
  }
  if (!(from.longitude() <= 0 && from.longitude() >= 0)) {
    _internal_set_longitude(from._internal_longitude());
  }
  if (!(from.latitude() <= 0 && from.latitude() >= 0)) {
    _internal_set_latitude(from._internal_latitude());
  }
}

void Feature_Etraction_Request::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Feature_Etraction_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature_Etraction_Request::CopyFrom(const Feature_Etraction_Request& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Feature_Etraction_Request)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature_Etraction_Request::IsInitialized() const {
  return true;
}

void Feature_Etraction_Request::InternalSwap(Feature_Etraction_Request* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  image_vector_.Swap(&other->image_vector_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Feature_Etraction_Request, latitude_)
      + sizeof(Feature_Etraction_Request::latitude_)
      - PROTOBUF_FIELD_OFFSET(Feature_Etraction_Request, longitude_)>(
          reinterpret_cast<char*>(&longitude_),
          reinterpret_cast<char*>(&other->longitude_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature_Etraction_Request::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Feature_Etraction_Response::InitAsDefaultInstance() {
}
class Feature_Etraction_Response::_Internal {
 public:
};

Feature_Etraction_Response::Feature_Etraction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:Feature_Etraction_Response)
}
Feature_Etraction_Response::Feature_Etraction_Response(const Feature_Etraction_Response& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Feature_Etraction_Response)
}

void Feature_Etraction_Response::SharedCtor() {
}

Feature_Etraction_Response::~Feature_Etraction_Response() {
  // @@protoc_insertion_point(destructor:Feature_Etraction_Response)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Feature_Etraction_Response::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Feature_Etraction_Response::ArenaDtor(void* object) {
  Feature_Etraction_Response* _this = reinterpret_cast< Feature_Etraction_Response* >(object);
  (void)_this;
}
void Feature_Etraction_Response::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Feature_Etraction_Response::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Feature_Etraction_Response& Feature_Etraction_Response::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Feature_Etraction_Response_sar_5fapplication_2eproto.base);
  return *internal_default_instance();
}


void Feature_Etraction_Response::Clear() {
// @@protoc_insertion_point(message_clear_start:Feature_Etraction_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Feature_Etraction_Response::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Feature_Etraction_Response::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Feature_Etraction_Response)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Feature_Etraction_Response)
  return target;
}

size_t Feature_Etraction_Response::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Feature_Etraction_Response)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Feature_Etraction_Response::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:Feature_Etraction_Response)
  GOOGLE_DCHECK_NE(&from, this);
  const Feature_Etraction_Response* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Feature_Etraction_Response>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:Feature_Etraction_Response)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:Feature_Etraction_Response)
    MergeFrom(*source);
  }
}

void Feature_Etraction_Response::MergeFrom(const Feature_Etraction_Response& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Feature_Etraction_Response)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void Feature_Etraction_Response::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:Feature_Etraction_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Feature_Etraction_Response::CopyFrom(const Feature_Etraction_Response& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Feature_Etraction_Response)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Feature_Etraction_Response::IsInitialized() const {
  return true;
}

void Feature_Etraction_Response::InternalSwap(Feature_Etraction_Response* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Feature_Etraction_Response::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::SAR_Open_Request* Arena::CreateMaybeMessage< ::SAR_Open_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SAR_Open_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SAR_Close_Request* Arena::CreateMaybeMessage< ::SAR_Close_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SAR_Close_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SAR_ReconstructTime_Request* Arena::CreateMaybeMessage< ::SAR_ReconstructTime_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SAR_ReconstructTime_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::SAR_Open_Response* Arena::CreateMaybeMessage< ::SAR_Open_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SAR_Open_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SAR_Close_Response* Arena::CreateMaybeMessage< ::SAR_Close_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SAR_Close_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::SAR_ReconstructTime_Response* Arena::CreateMaybeMessage< ::SAR_ReconstructTime_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::SAR_ReconstructTime_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::DSPControllerRequest* Arena::CreateMaybeMessage< ::DSPControllerRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DSPControllerRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::DSPControllerResponse* Arena::CreateMaybeMessage< ::DSPControllerResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DSPControllerResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::ReconstructTimeResponse* Arena::CreateMaybeMessage< ::ReconstructTimeResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ReconstructTimeResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::NoiseReduction_Request* Arena::CreateMaybeMessage< ::NoiseReduction_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NoiseReduction_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::NoiseReduction_Response* Arena::CreateMaybeMessage< ::NoiseReduction_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NoiseReduction_Response >(arena);
}
template<> PROTOBUF_NOINLINE ::Feature_Etraction_Request* Arena::CreateMaybeMessage< ::Feature_Etraction_Request >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Feature_Etraction_Request >(arena);
}
template<> PROTOBUF_NOINLINE ::Feature_Etraction_Response* Arena::CreateMaybeMessage< ::Feature_Etraction_Response >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Feature_Etraction_Response >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
