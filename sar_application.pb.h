// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: sar_application.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_sar_5fapplication_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_sar_5fapplication_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_sar_5fapplication_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_sar_5fapplication_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[13]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_sar_5fapplication_2eproto;
class DSPControllerRequest;
class DSPControllerRequestDefaultTypeInternal;
extern DSPControllerRequestDefaultTypeInternal _DSPControllerRequest_default_instance_;
class DSPControllerResponse;
class DSPControllerResponseDefaultTypeInternal;
extern DSPControllerResponseDefaultTypeInternal _DSPControllerResponse_default_instance_;
class Feature_Etraction_Request;
class Feature_Etraction_RequestDefaultTypeInternal;
extern Feature_Etraction_RequestDefaultTypeInternal _Feature_Etraction_Request_default_instance_;
class Feature_Etraction_Response;
class Feature_Etraction_ResponseDefaultTypeInternal;
extern Feature_Etraction_ResponseDefaultTypeInternal _Feature_Etraction_Response_default_instance_;
class NoiseReduction_Request;
class NoiseReduction_RequestDefaultTypeInternal;
extern NoiseReduction_RequestDefaultTypeInternal _NoiseReduction_Request_default_instance_;
class NoiseReduction_Response;
class NoiseReduction_ResponseDefaultTypeInternal;
extern NoiseReduction_ResponseDefaultTypeInternal _NoiseReduction_Response_default_instance_;
class ReconstructTimeResponse;
class ReconstructTimeResponseDefaultTypeInternal;
extern ReconstructTimeResponseDefaultTypeInternal _ReconstructTimeResponse_default_instance_;
class SAR_Close_Request;
class SAR_Close_RequestDefaultTypeInternal;
extern SAR_Close_RequestDefaultTypeInternal _SAR_Close_Request_default_instance_;
class SAR_Close_Response;
class SAR_Close_ResponseDefaultTypeInternal;
extern SAR_Close_ResponseDefaultTypeInternal _SAR_Close_Response_default_instance_;
class SAR_Open_Request;
class SAR_Open_RequestDefaultTypeInternal;
extern SAR_Open_RequestDefaultTypeInternal _SAR_Open_Request_default_instance_;
class SAR_Open_Response;
class SAR_Open_ResponseDefaultTypeInternal;
extern SAR_Open_ResponseDefaultTypeInternal _SAR_Open_Response_default_instance_;
class SAR_ReconstructTime_Request;
class SAR_ReconstructTime_RequestDefaultTypeInternal;
extern SAR_ReconstructTime_RequestDefaultTypeInternal _SAR_ReconstructTime_Request_default_instance_;
class SAR_ReconstructTime_Response;
class SAR_ReconstructTime_ResponseDefaultTypeInternal;
extern SAR_ReconstructTime_ResponseDefaultTypeInternal _SAR_ReconstructTime_Response_default_instance_;
PROTOBUF_NAMESPACE_OPEN
template<> ::DSPControllerRequest* Arena::CreateMaybeMessage<::DSPControllerRequest>(Arena*);
template<> ::DSPControllerResponse* Arena::CreateMaybeMessage<::DSPControllerResponse>(Arena*);
template<> ::Feature_Etraction_Request* Arena::CreateMaybeMessage<::Feature_Etraction_Request>(Arena*);
template<> ::Feature_Etraction_Response* Arena::CreateMaybeMessage<::Feature_Etraction_Response>(Arena*);
template<> ::NoiseReduction_Request* Arena::CreateMaybeMessage<::NoiseReduction_Request>(Arena*);
template<> ::NoiseReduction_Response* Arena::CreateMaybeMessage<::NoiseReduction_Response>(Arena*);
template<> ::ReconstructTimeResponse* Arena::CreateMaybeMessage<::ReconstructTimeResponse>(Arena*);
template<> ::SAR_Close_Request* Arena::CreateMaybeMessage<::SAR_Close_Request>(Arena*);
template<> ::SAR_Close_Response* Arena::CreateMaybeMessage<::SAR_Close_Response>(Arena*);
template<> ::SAR_Open_Request* Arena::CreateMaybeMessage<::SAR_Open_Request>(Arena*);
template<> ::SAR_Open_Response* Arena::CreateMaybeMessage<::SAR_Open_Response>(Arena*);
template<> ::SAR_ReconstructTime_Request* Arena::CreateMaybeMessage<::SAR_ReconstructTime_Request>(Arena*);
template<> ::SAR_ReconstructTime_Response* Arena::CreateMaybeMessage<::SAR_ReconstructTime_Response>(Arena*);
PROTOBUF_NAMESPACE_CLOSE

// ===================================================================

class SAR_Open_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SAR_Open_Request) */ {
 public:
  inline SAR_Open_Request() : SAR_Open_Request(nullptr) {};
  virtual ~SAR_Open_Request();

  SAR_Open_Request(const SAR_Open_Request& from);
  SAR_Open_Request(SAR_Open_Request&& from) noexcept
    : SAR_Open_Request() {
    *this = ::std::move(from);
  }

  inline SAR_Open_Request& operator=(const SAR_Open_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAR_Open_Request& operator=(SAR_Open_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAR_Open_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAR_Open_Request* internal_default_instance() {
    return reinterpret_cast<const SAR_Open_Request*>(
               &_SAR_Open_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(SAR_Open_Request& a, SAR_Open_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SAR_Open_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SAR_Open_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAR_Open_Request* New() const final {
    return CreateMaybeMessage<SAR_Open_Request>(nullptr);
  }

  SAR_Open_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAR_Open_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAR_Open_Request& from);
  void MergeFrom(const SAR_Open_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAR_Open_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SAR_Open_Request";
  }
  protected:
  explicit SAR_Open_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kOperteModeFieldNumber = 1,
    kApertureLengthFieldNumber = 2,
    kWinNumerFieldNumber = 3,
    kGateThresholdFieldNumber = 4,
    kLongitudeFieldNumber = 5,
    kLatitudeFieldNumber = 6,
  };
  // int32 operteMode = 1;
  void clear_opertemode();
  ::PROTOBUF_NAMESPACE_ID::int32 opertemode() const;
  void set_opertemode(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_opertemode() const;
  void _internal_set_opertemode(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 apertureLength = 2;
  void clear_aperturelength();
  ::PROTOBUF_NAMESPACE_ID::int32 aperturelength() const;
  void set_aperturelength(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_aperturelength() const;
  void _internal_set_aperturelength(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 winNumer = 3;
  void clear_winnumer();
  ::PROTOBUF_NAMESPACE_ID::int32 winnumer() const;
  void set_winnumer(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_winnumer() const;
  void _internal_set_winnumer(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 gateThreshold = 4;
  void clear_gatethreshold();
  ::PROTOBUF_NAMESPACE_ID::int32 gatethreshold() const;
  void set_gatethreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_gatethreshold() const;
  void _internal_set_gatethreshold(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float longitude = 5;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float latitude = 6;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:SAR_Open_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 opertemode_;
  ::PROTOBUF_NAMESPACE_ID::int32 aperturelength_;
  ::PROTOBUF_NAMESPACE_ID::int32 winnumer_;
  ::PROTOBUF_NAMESPACE_ID::int32 gatethreshold_;
  float longitude_;
  float latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class SAR_Close_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SAR_Close_Request) */ {
 public:
  inline SAR_Close_Request() : SAR_Close_Request(nullptr) {};
  virtual ~SAR_Close_Request();

  SAR_Close_Request(const SAR_Close_Request& from);
  SAR_Close_Request(SAR_Close_Request&& from) noexcept
    : SAR_Close_Request() {
    *this = ::std::move(from);
  }

  inline SAR_Close_Request& operator=(const SAR_Close_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAR_Close_Request& operator=(SAR_Close_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAR_Close_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAR_Close_Request* internal_default_instance() {
    return reinterpret_cast<const SAR_Close_Request*>(
               &_SAR_Close_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(SAR_Close_Request& a, SAR_Close_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SAR_Close_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SAR_Close_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAR_Close_Request* New() const final {
    return CreateMaybeMessage<SAR_Close_Request>(nullptr);
  }

  SAR_Close_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAR_Close_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAR_Close_Request& from);
  void MergeFrom(const SAR_Close_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAR_Close_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SAR_Close_Request";
  }
  protected:
  explicit SAR_Close_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SAR_Close_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class SAR_ReconstructTime_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SAR_ReconstructTime_Request) */ {
 public:
  inline SAR_ReconstructTime_Request() : SAR_ReconstructTime_Request(nullptr) {};
  virtual ~SAR_ReconstructTime_Request();

  SAR_ReconstructTime_Request(const SAR_ReconstructTime_Request& from);
  SAR_ReconstructTime_Request(SAR_ReconstructTime_Request&& from) noexcept
    : SAR_ReconstructTime_Request() {
    *this = ::std::move(from);
  }

  inline SAR_ReconstructTime_Request& operator=(const SAR_ReconstructTime_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAR_ReconstructTime_Request& operator=(SAR_ReconstructTime_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAR_ReconstructTime_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAR_ReconstructTime_Request* internal_default_instance() {
    return reinterpret_cast<const SAR_ReconstructTime_Request*>(
               &_SAR_ReconstructTime_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(SAR_ReconstructTime_Request& a, SAR_ReconstructTime_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(SAR_ReconstructTime_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SAR_ReconstructTime_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAR_ReconstructTime_Request* New() const final {
    return CreateMaybeMessage<SAR_ReconstructTime_Request>(nullptr);
  }

  SAR_ReconstructTime_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAR_ReconstructTime_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAR_ReconstructTime_Request& from);
  void MergeFrom(const SAR_ReconstructTime_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAR_ReconstructTime_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SAR_ReconstructTime_Request";
  }
  protected:
  explicit SAR_ReconstructTime_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SAR_ReconstructTime_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class SAR_Open_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SAR_Open_Response) */ {
 public:
  inline SAR_Open_Response() : SAR_Open_Response(nullptr) {};
  virtual ~SAR_Open_Response();

  SAR_Open_Response(const SAR_Open_Response& from);
  SAR_Open_Response(SAR_Open_Response&& from) noexcept
    : SAR_Open_Response() {
    *this = ::std::move(from);
  }

  inline SAR_Open_Response& operator=(const SAR_Open_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAR_Open_Response& operator=(SAR_Open_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAR_Open_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAR_Open_Response* internal_default_instance() {
    return reinterpret_cast<const SAR_Open_Response*>(
               &_SAR_Open_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(SAR_Open_Response& a, SAR_Open_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SAR_Open_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SAR_Open_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAR_Open_Response* New() const final {
    return CreateMaybeMessage<SAR_Open_Response>(nullptr);
  }

  SAR_Open_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAR_Open_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAR_Open_Response& from);
  void MergeFrom(const SAR_Open_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAR_Open_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SAR_Open_Response";
  }
  protected:
  explicit SAR_Open_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SAR_Open_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class SAR_Close_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SAR_Close_Response) */ {
 public:
  inline SAR_Close_Response() : SAR_Close_Response(nullptr) {};
  virtual ~SAR_Close_Response();

  SAR_Close_Response(const SAR_Close_Response& from);
  SAR_Close_Response(SAR_Close_Response&& from) noexcept
    : SAR_Close_Response() {
    *this = ::std::move(from);
  }

  inline SAR_Close_Response& operator=(const SAR_Close_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAR_Close_Response& operator=(SAR_Close_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAR_Close_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAR_Close_Response* internal_default_instance() {
    return reinterpret_cast<const SAR_Close_Response*>(
               &_SAR_Close_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(SAR_Close_Response& a, SAR_Close_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SAR_Close_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SAR_Close_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAR_Close_Response* New() const final {
    return CreateMaybeMessage<SAR_Close_Response>(nullptr);
  }

  SAR_Close_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAR_Close_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAR_Close_Response& from);
  void MergeFrom(const SAR_Close_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAR_Close_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SAR_Close_Response";
  }
  protected:
  explicit SAR_Close_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:SAR_Close_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class SAR_ReconstructTime_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:SAR_ReconstructTime_Response) */ {
 public:
  inline SAR_ReconstructTime_Response() : SAR_ReconstructTime_Response(nullptr) {};
  virtual ~SAR_ReconstructTime_Response();

  SAR_ReconstructTime_Response(const SAR_ReconstructTime_Response& from);
  SAR_ReconstructTime_Response(SAR_ReconstructTime_Response&& from) noexcept
    : SAR_ReconstructTime_Response() {
    *this = ::std::move(from);
  }

  inline SAR_ReconstructTime_Response& operator=(const SAR_ReconstructTime_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline SAR_ReconstructTime_Response& operator=(SAR_ReconstructTime_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const SAR_ReconstructTime_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const SAR_ReconstructTime_Response* internal_default_instance() {
    return reinterpret_cast<const SAR_ReconstructTime_Response*>(
               &_SAR_ReconstructTime_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(SAR_ReconstructTime_Response& a, SAR_ReconstructTime_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(SAR_ReconstructTime_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SAR_ReconstructTime_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline SAR_ReconstructTime_Response* New() const final {
    return CreateMaybeMessage<SAR_ReconstructTime_Response>(nullptr);
  }

  SAR_ReconstructTime_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<SAR_ReconstructTime_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const SAR_ReconstructTime_Response& from);
  void MergeFrom(const SAR_ReconstructTime_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(SAR_ReconstructTime_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "SAR_ReconstructTime_Response";
  }
  protected:
  explicit SAR_ReconstructTime_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTask1FieldNumber = 1,
    kTask2FieldNumber = 2,
    kHardwareidFieldNumber = 3,
    kTimelenFieldNumber = 4,
    kParam1FieldNumber = 5,
    kParam2FieldNumber = 6,
  };
  // uint32 task1 = 1;
  void clear_task1();
  ::PROTOBUF_NAMESPACE_ID::uint32 task1() const;
  void set_task1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_task1() const;
  void _internal_set_task1(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 task2 = 2;
  void clear_task2();
  ::PROTOBUF_NAMESPACE_ID::uint32 task2() const;
  void set_task2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_task2() const;
  void _internal_set_task2(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // uint32 hardwareid = 3;
  void clear_hardwareid();
  ::PROTOBUF_NAMESPACE_ID::uint32 hardwareid() const;
  void set_hardwareid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::uint32 _internal_hardwareid() const;
  void _internal_set_hardwareid(::PROTOBUF_NAMESPACE_ID::uint32 value);
  public:

  // float timelen = 4;
  void clear_timelen();
  float timelen() const;
  void set_timelen(float value);
  private:
  float _internal_timelen() const;
  void _internal_set_timelen(float value);
  public:

  // float param1 = 5;
  void clear_param1();
  float param1() const;
  void set_param1(float value);
  private:
  float _internal_param1() const;
  void _internal_set_param1(float value);
  public:

  // float param2 = 6;
  void clear_param2();
  float param2() const;
  void set_param2(float value);
  private:
  float _internal_param2() const;
  void _internal_set_param2(float value);
  public:

  // @@protoc_insertion_point(class_scope:SAR_ReconstructTime_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::uint32 task1_;
  ::PROTOBUF_NAMESPACE_ID::uint32 task2_;
  ::PROTOBUF_NAMESPACE_ID::uint32 hardwareid_;
  float timelen_;
  float param1_;
  float param2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class DSPControllerRequest PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DSPControllerRequest) */ {
 public:
  inline DSPControllerRequest() : DSPControllerRequest(nullptr) {};
  virtual ~DSPControllerRequest();

  DSPControllerRequest(const DSPControllerRequest& from);
  DSPControllerRequest(DSPControllerRequest&& from) noexcept
    : DSPControllerRequest() {
    *this = ::std::move(from);
  }

  inline DSPControllerRequest& operator=(const DSPControllerRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline DSPControllerRequest& operator=(DSPControllerRequest&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DSPControllerRequest& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DSPControllerRequest* internal_default_instance() {
    return reinterpret_cast<const DSPControllerRequest*>(
               &_DSPControllerRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(DSPControllerRequest& a, DSPControllerRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(DSPControllerRequest* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DSPControllerRequest* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DSPControllerRequest* New() const final {
    return CreateMaybeMessage<DSPControllerRequest>(nullptr);
  }

  DSPControllerRequest* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DSPControllerRequest>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DSPControllerRequest& from);
  void MergeFrom(const DSPControllerRequest& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DSPControllerRequest* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DSPControllerRequest";
  }
  protected:
  explicit DSPControllerRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DSPControllerRequest)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class DSPControllerResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DSPControllerResponse) */ {
 public:
  inline DSPControllerResponse() : DSPControllerResponse(nullptr) {};
  virtual ~DSPControllerResponse();

  DSPControllerResponse(const DSPControllerResponse& from);
  DSPControllerResponse(DSPControllerResponse&& from) noexcept
    : DSPControllerResponse() {
    *this = ::std::move(from);
  }

  inline DSPControllerResponse& operator=(const DSPControllerResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline DSPControllerResponse& operator=(DSPControllerResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const DSPControllerResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DSPControllerResponse* internal_default_instance() {
    return reinterpret_cast<const DSPControllerResponse*>(
               &_DSPControllerResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(DSPControllerResponse& a, DSPControllerResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(DSPControllerResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(DSPControllerResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline DSPControllerResponse* New() const final {
    return CreateMaybeMessage<DSPControllerResponse>(nullptr);
  }

  DSPControllerResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<DSPControllerResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const DSPControllerResponse& from);
  void MergeFrom(const DSPControllerResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(DSPControllerResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DSPControllerResponse";
  }
  protected:
  explicit DSPControllerResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:DSPControllerResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class ReconstructTimeResponse PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:ReconstructTimeResponse) */ {
 public:
  inline ReconstructTimeResponse() : ReconstructTimeResponse(nullptr) {};
  virtual ~ReconstructTimeResponse();

  ReconstructTimeResponse(const ReconstructTimeResponse& from);
  ReconstructTimeResponse(ReconstructTimeResponse&& from) noexcept
    : ReconstructTimeResponse() {
    *this = ::std::move(from);
  }

  inline ReconstructTimeResponse& operator=(const ReconstructTimeResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline ReconstructTimeResponse& operator=(ReconstructTimeResponse&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const ReconstructTimeResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ReconstructTimeResponse* internal_default_instance() {
    return reinterpret_cast<const ReconstructTimeResponse*>(
               &_ReconstructTimeResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(ReconstructTimeResponse& a, ReconstructTimeResponse& b) {
    a.Swap(&b);
  }
  inline void Swap(ReconstructTimeResponse* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ReconstructTimeResponse* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline ReconstructTimeResponse* New() const final {
    return CreateMaybeMessage<ReconstructTimeResponse>(nullptr);
  }

  ReconstructTimeResponse* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<ReconstructTimeResponse>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const ReconstructTimeResponse& from);
  void MergeFrom(const ReconstructTimeResponse& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(ReconstructTimeResponse* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "ReconstructTimeResponse";
  }
  protected:
  explicit ReconstructTimeResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kTimeFieldNumber = 1,
  };
  // float time = 1;
  void clear_time();
  float time() const;
  void set_time(float value);
  private:
  float _internal_time() const;
  void _internal_set_time(float value);
  public:

  // @@protoc_insertion_point(class_scope:ReconstructTimeResponse)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float time_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class NoiseReduction_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NoiseReduction_Request) */ {
 public:
  inline NoiseReduction_Request() : NoiseReduction_Request(nullptr) {};
  virtual ~NoiseReduction_Request();

  NoiseReduction_Request(const NoiseReduction_Request& from);
  NoiseReduction_Request(NoiseReduction_Request&& from) noexcept
    : NoiseReduction_Request() {
    *this = ::std::move(from);
  }

  inline NoiseReduction_Request& operator=(const NoiseReduction_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoiseReduction_Request& operator=(NoiseReduction_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoiseReduction_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoiseReduction_Request* internal_default_instance() {
    return reinterpret_cast<const NoiseReduction_Request*>(
               &_NoiseReduction_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(NoiseReduction_Request& a, NoiseReduction_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(NoiseReduction_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoiseReduction_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoiseReduction_Request* New() const final {
    return CreateMaybeMessage<NoiseReduction_Request>(nullptr);
  }

  NoiseReduction_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoiseReduction_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoiseReduction_Request& from);
  void MergeFrom(const NoiseReduction_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoiseReduction_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NoiseReduction_Request";
  }
  protected:
  explicit NoiseReduction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // float longitude = 1;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float latitude = 2;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:NoiseReduction_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float longitude_;
  float latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class NoiseReduction_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:NoiseReduction_Response) */ {
 public:
  inline NoiseReduction_Response() : NoiseReduction_Response(nullptr) {};
  virtual ~NoiseReduction_Response();

  NoiseReduction_Response(const NoiseReduction_Response& from);
  NoiseReduction_Response(NoiseReduction_Response&& from) noexcept
    : NoiseReduction_Response() {
    *this = ::std::move(from);
  }

  inline NoiseReduction_Response& operator=(const NoiseReduction_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline NoiseReduction_Response& operator=(NoiseReduction_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const NoiseReduction_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const NoiseReduction_Response* internal_default_instance() {
    return reinterpret_cast<const NoiseReduction_Response*>(
               &_NoiseReduction_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(NoiseReduction_Response& a, NoiseReduction_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(NoiseReduction_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(NoiseReduction_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline NoiseReduction_Response* New() const final {
    return CreateMaybeMessage<NoiseReduction_Response>(nullptr);
  }

  NoiseReduction_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<NoiseReduction_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const NoiseReduction_Response& from);
  void MergeFrom(const NoiseReduction_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(NoiseReduction_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "NoiseReduction_Response";
  }
  protected:
  explicit NoiseReduction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageVectorFieldNumber = 3,
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // bytes image_vector = 3;
  void clear_image_vector();
  const std::string& image_vector() const;
  void set_image_vector(const std::string& value);
  void set_image_vector(std::string&& value);
  void set_image_vector(const char* value);
  void set_image_vector(const void* value, size_t size);
  std::string* mutable_image_vector();
  std::string* release_image_vector();
  void set_allocated_image_vector(std::string* image_vector);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_vector();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_vector(
      std::string* image_vector);
  private:
  const std::string& _internal_image_vector() const;
  void _internal_set_image_vector(const std::string& value);
  std::string* _internal_mutable_image_vector();
  public:

  // float longitude = 1;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float latitude = 2;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:NoiseReduction_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_vector_;
  float longitude_;
  float latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class Feature_Etraction_Request PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Feature_Etraction_Request) */ {
 public:
  inline Feature_Etraction_Request() : Feature_Etraction_Request(nullptr) {};
  virtual ~Feature_Etraction_Request();

  Feature_Etraction_Request(const Feature_Etraction_Request& from);
  Feature_Etraction_Request(Feature_Etraction_Request&& from) noexcept
    : Feature_Etraction_Request() {
    *this = ::std::move(from);
  }

  inline Feature_Etraction_Request& operator=(const Feature_Etraction_Request& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature_Etraction_Request& operator=(Feature_Etraction_Request&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feature_Etraction_Request& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature_Etraction_Request* internal_default_instance() {
    return reinterpret_cast<const Feature_Etraction_Request*>(
               &_Feature_Etraction_Request_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Feature_Etraction_Request& a, Feature_Etraction_Request& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature_Etraction_Request* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature_Etraction_Request* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feature_Etraction_Request* New() const final {
    return CreateMaybeMessage<Feature_Etraction_Request>(nullptr);
  }

  Feature_Etraction_Request* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feature_Etraction_Request>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feature_Etraction_Request& from);
  void MergeFrom(const Feature_Etraction_Request& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature_Etraction_Request* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Feature_Etraction_Request";
  }
  protected:
  explicit Feature_Etraction_Request(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kImageVectorFieldNumber = 3,
    kLongitudeFieldNumber = 1,
    kLatitudeFieldNumber = 2,
  };
  // bytes image_vector = 3;
  void clear_image_vector();
  const std::string& image_vector() const;
  void set_image_vector(const std::string& value);
  void set_image_vector(std::string&& value);
  void set_image_vector(const char* value);
  void set_image_vector(const void* value, size_t size);
  std::string* mutable_image_vector();
  std::string* release_image_vector();
  void set_allocated_image_vector(std::string* image_vector);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_image_vector();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_image_vector(
      std::string* image_vector);
  private:
  const std::string& _internal_image_vector() const;
  void _internal_set_image_vector(const std::string& value);
  std::string* _internal_mutable_image_vector();
  public:

  // float longitude = 1;
  void clear_longitude();
  float longitude() const;
  void set_longitude(float value);
  private:
  float _internal_longitude() const;
  void _internal_set_longitude(float value);
  public:

  // float latitude = 2;
  void clear_latitude();
  float latitude() const;
  void set_latitude(float value);
  private:
  float _internal_latitude() const;
  void _internal_set_latitude(float value);
  public:

  // @@protoc_insertion_point(class_scope:Feature_Etraction_Request)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr image_vector_;
  float longitude_;
  float latitude_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// -------------------------------------------------------------------

class Feature_Etraction_Response PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Feature_Etraction_Response) */ {
 public:
  inline Feature_Etraction_Response() : Feature_Etraction_Response(nullptr) {};
  virtual ~Feature_Etraction_Response();

  Feature_Etraction_Response(const Feature_Etraction_Response& from);
  Feature_Etraction_Response(Feature_Etraction_Response&& from) noexcept
    : Feature_Etraction_Response() {
    *this = ::std::move(from);
  }

  inline Feature_Etraction_Response& operator=(const Feature_Etraction_Response& from) {
    CopyFrom(from);
    return *this;
  }
  inline Feature_Etraction_Response& operator=(Feature_Etraction_Response&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Feature_Etraction_Response& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Feature_Etraction_Response* internal_default_instance() {
    return reinterpret_cast<const Feature_Etraction_Response*>(
               &_Feature_Etraction_Response_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Feature_Etraction_Response& a, Feature_Etraction_Response& b) {
    a.Swap(&b);
  }
  inline void Swap(Feature_Etraction_Response* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Feature_Etraction_Response* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Feature_Etraction_Response* New() const final {
    return CreateMaybeMessage<Feature_Etraction_Response>(nullptr);
  }

  Feature_Etraction_Response* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Feature_Etraction_Response>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Feature_Etraction_Response& from);
  void MergeFrom(const Feature_Etraction_Response& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Feature_Etraction_Response* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Feature_Etraction_Response";
  }
  protected:
  explicit Feature_Etraction_Response(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_sar_5fapplication_2eproto);
    return ::descriptor_table_sar_5fapplication_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:Feature_Etraction_Response)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_sar_5fapplication_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// SAR_Open_Request

// int32 operteMode = 1;
inline void SAR_Open_Request::clear_opertemode() {
  opertemode_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAR_Open_Request::_internal_opertemode() const {
  return opertemode_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAR_Open_Request::opertemode() const {
  // @@protoc_insertion_point(field_get:SAR_Open_Request.operteMode)
  return _internal_opertemode();
}
inline void SAR_Open_Request::_internal_set_opertemode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  opertemode_ = value;
}
inline void SAR_Open_Request::set_opertemode(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_opertemode(value);
  // @@protoc_insertion_point(field_set:SAR_Open_Request.operteMode)
}

// int32 apertureLength = 2;
inline void SAR_Open_Request::clear_aperturelength() {
  aperturelength_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAR_Open_Request::_internal_aperturelength() const {
  return aperturelength_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAR_Open_Request::aperturelength() const {
  // @@protoc_insertion_point(field_get:SAR_Open_Request.apertureLength)
  return _internal_aperturelength();
}
inline void SAR_Open_Request::_internal_set_aperturelength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  aperturelength_ = value;
}
inline void SAR_Open_Request::set_aperturelength(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_aperturelength(value);
  // @@protoc_insertion_point(field_set:SAR_Open_Request.apertureLength)
}

// int32 winNumer = 3;
inline void SAR_Open_Request::clear_winnumer() {
  winnumer_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAR_Open_Request::_internal_winnumer() const {
  return winnumer_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAR_Open_Request::winnumer() const {
  // @@protoc_insertion_point(field_get:SAR_Open_Request.winNumer)
  return _internal_winnumer();
}
inline void SAR_Open_Request::_internal_set_winnumer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  winnumer_ = value;
}
inline void SAR_Open_Request::set_winnumer(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_winnumer(value);
  // @@protoc_insertion_point(field_set:SAR_Open_Request.winNumer)
}

// int32 gateThreshold = 4;
inline void SAR_Open_Request::clear_gatethreshold() {
  gatethreshold_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAR_Open_Request::_internal_gatethreshold() const {
  return gatethreshold_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 SAR_Open_Request::gatethreshold() const {
  // @@protoc_insertion_point(field_get:SAR_Open_Request.gateThreshold)
  return _internal_gatethreshold();
}
inline void SAR_Open_Request::_internal_set_gatethreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  gatethreshold_ = value;
}
inline void SAR_Open_Request::set_gatethreshold(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_gatethreshold(value);
  // @@protoc_insertion_point(field_set:SAR_Open_Request.gateThreshold)
}

// float longitude = 5;
inline void SAR_Open_Request::clear_longitude() {
  longitude_ = 0;
}
inline float SAR_Open_Request::_internal_longitude() const {
  return longitude_;
}
inline float SAR_Open_Request::longitude() const {
  // @@protoc_insertion_point(field_get:SAR_Open_Request.longitude)
  return _internal_longitude();
}
inline void SAR_Open_Request::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void SAR_Open_Request::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:SAR_Open_Request.longitude)
}

// float latitude = 6;
inline void SAR_Open_Request::clear_latitude() {
  latitude_ = 0;
}
inline float SAR_Open_Request::_internal_latitude() const {
  return latitude_;
}
inline float SAR_Open_Request::latitude() const {
  // @@protoc_insertion_point(field_get:SAR_Open_Request.latitude)
  return _internal_latitude();
}
inline void SAR_Open_Request::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void SAR_Open_Request::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:SAR_Open_Request.latitude)
}

// -------------------------------------------------------------------

// SAR_Close_Request

// -------------------------------------------------------------------

// SAR_ReconstructTime_Request

// -------------------------------------------------------------------

// SAR_Open_Response

// -------------------------------------------------------------------

// SAR_Close_Response

// -------------------------------------------------------------------

// SAR_ReconstructTime_Response

// uint32 task1 = 1;
inline void SAR_ReconstructTime_Response::clear_task1() {
  task1_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SAR_ReconstructTime_Response::_internal_task1() const {
  return task1_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SAR_ReconstructTime_Response::task1() const {
  // @@protoc_insertion_point(field_get:SAR_ReconstructTime_Response.task1)
  return _internal_task1();
}
inline void SAR_ReconstructTime_Response::_internal_set_task1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  task1_ = value;
}
inline void SAR_ReconstructTime_Response::set_task1(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_task1(value);
  // @@protoc_insertion_point(field_set:SAR_ReconstructTime_Response.task1)
}

// uint32 task2 = 2;
inline void SAR_ReconstructTime_Response::clear_task2() {
  task2_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SAR_ReconstructTime_Response::_internal_task2() const {
  return task2_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SAR_ReconstructTime_Response::task2() const {
  // @@protoc_insertion_point(field_get:SAR_ReconstructTime_Response.task2)
  return _internal_task2();
}
inline void SAR_ReconstructTime_Response::_internal_set_task2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  task2_ = value;
}
inline void SAR_ReconstructTime_Response::set_task2(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_task2(value);
  // @@protoc_insertion_point(field_set:SAR_ReconstructTime_Response.task2)
}

// uint32 hardwareid = 3;
inline void SAR_ReconstructTime_Response::clear_hardwareid() {
  hardwareid_ = 0u;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SAR_ReconstructTime_Response::_internal_hardwareid() const {
  return hardwareid_;
}
inline ::PROTOBUF_NAMESPACE_ID::uint32 SAR_ReconstructTime_Response::hardwareid() const {
  // @@protoc_insertion_point(field_get:SAR_ReconstructTime_Response.hardwareid)
  return _internal_hardwareid();
}
inline void SAR_ReconstructTime_Response::_internal_set_hardwareid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  
  hardwareid_ = value;
}
inline void SAR_ReconstructTime_Response::set_hardwareid(::PROTOBUF_NAMESPACE_ID::uint32 value) {
  _internal_set_hardwareid(value);
  // @@protoc_insertion_point(field_set:SAR_ReconstructTime_Response.hardwareid)
}

// float timelen = 4;
inline void SAR_ReconstructTime_Response::clear_timelen() {
  timelen_ = 0;
}
inline float SAR_ReconstructTime_Response::_internal_timelen() const {
  return timelen_;
}
inline float SAR_ReconstructTime_Response::timelen() const {
  // @@protoc_insertion_point(field_get:SAR_ReconstructTime_Response.timelen)
  return _internal_timelen();
}
inline void SAR_ReconstructTime_Response::_internal_set_timelen(float value) {
  
  timelen_ = value;
}
inline void SAR_ReconstructTime_Response::set_timelen(float value) {
  _internal_set_timelen(value);
  // @@protoc_insertion_point(field_set:SAR_ReconstructTime_Response.timelen)
}

// float param1 = 5;
inline void SAR_ReconstructTime_Response::clear_param1() {
  param1_ = 0;
}
inline float SAR_ReconstructTime_Response::_internal_param1() const {
  return param1_;
}
inline float SAR_ReconstructTime_Response::param1() const {
  // @@protoc_insertion_point(field_get:SAR_ReconstructTime_Response.param1)
  return _internal_param1();
}
inline void SAR_ReconstructTime_Response::_internal_set_param1(float value) {
  
  param1_ = value;
}
inline void SAR_ReconstructTime_Response::set_param1(float value) {
  _internal_set_param1(value);
  // @@protoc_insertion_point(field_set:SAR_ReconstructTime_Response.param1)
}

// float param2 = 6;
inline void SAR_ReconstructTime_Response::clear_param2() {
  param2_ = 0;
}
inline float SAR_ReconstructTime_Response::_internal_param2() const {
  return param2_;
}
inline float SAR_ReconstructTime_Response::param2() const {
  // @@protoc_insertion_point(field_get:SAR_ReconstructTime_Response.param2)
  return _internal_param2();
}
inline void SAR_ReconstructTime_Response::_internal_set_param2(float value) {
  
  param2_ = value;
}
inline void SAR_ReconstructTime_Response::set_param2(float value) {
  _internal_set_param2(value);
  // @@protoc_insertion_point(field_set:SAR_ReconstructTime_Response.param2)
}

// -------------------------------------------------------------------

// DSPControllerRequest

// -------------------------------------------------------------------

// DSPControllerResponse

// -------------------------------------------------------------------

// ReconstructTimeResponse

// float time = 1;
inline void ReconstructTimeResponse::clear_time() {
  time_ = 0;
}
inline float ReconstructTimeResponse::_internal_time() const {
  return time_;
}
inline float ReconstructTimeResponse::time() const {
  // @@protoc_insertion_point(field_get:ReconstructTimeResponse.time)
  return _internal_time();
}
inline void ReconstructTimeResponse::_internal_set_time(float value) {
  
  time_ = value;
}
inline void ReconstructTimeResponse::set_time(float value) {
  _internal_set_time(value);
  // @@protoc_insertion_point(field_set:ReconstructTimeResponse.time)
}

// -------------------------------------------------------------------

// NoiseReduction_Request

// float longitude = 1;
inline void NoiseReduction_Request::clear_longitude() {
  longitude_ = 0;
}
inline float NoiseReduction_Request::_internal_longitude() const {
  return longitude_;
}
inline float NoiseReduction_Request::longitude() const {
  // @@protoc_insertion_point(field_get:NoiseReduction_Request.longitude)
  return _internal_longitude();
}
inline void NoiseReduction_Request::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void NoiseReduction_Request::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:NoiseReduction_Request.longitude)
}

// float latitude = 2;
inline void NoiseReduction_Request::clear_latitude() {
  latitude_ = 0;
}
inline float NoiseReduction_Request::_internal_latitude() const {
  return latitude_;
}
inline float NoiseReduction_Request::latitude() const {
  // @@protoc_insertion_point(field_get:NoiseReduction_Request.latitude)
  return _internal_latitude();
}
inline void NoiseReduction_Request::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void NoiseReduction_Request::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:NoiseReduction_Request.latitude)
}

// -------------------------------------------------------------------

// NoiseReduction_Response

// float longitude = 1;
inline void NoiseReduction_Response::clear_longitude() {
  longitude_ = 0;
}
inline float NoiseReduction_Response::_internal_longitude() const {
  return longitude_;
}
inline float NoiseReduction_Response::longitude() const {
  // @@protoc_insertion_point(field_get:NoiseReduction_Response.longitude)
  return _internal_longitude();
}
inline void NoiseReduction_Response::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void NoiseReduction_Response::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:NoiseReduction_Response.longitude)
}

// float latitude = 2;
inline void NoiseReduction_Response::clear_latitude() {
  latitude_ = 0;
}
inline float NoiseReduction_Response::_internal_latitude() const {
  return latitude_;
}
inline float NoiseReduction_Response::latitude() const {
  // @@protoc_insertion_point(field_get:NoiseReduction_Response.latitude)
  return _internal_latitude();
}
inline void NoiseReduction_Response::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void NoiseReduction_Response::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:NoiseReduction_Response.latitude)
}

// bytes image_vector = 3;
inline void NoiseReduction_Response::clear_image_vector() {
  image_vector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& NoiseReduction_Response::image_vector() const {
  // @@protoc_insertion_point(field_get:NoiseReduction_Response.image_vector)
  return _internal_image_vector();
}
inline void NoiseReduction_Response::set_image_vector(const std::string& value) {
  _internal_set_image_vector(value);
  // @@protoc_insertion_point(field_set:NoiseReduction_Response.image_vector)
}
inline std::string* NoiseReduction_Response::mutable_image_vector() {
  // @@protoc_insertion_point(field_mutable:NoiseReduction_Response.image_vector)
  return _internal_mutable_image_vector();
}
inline const std::string& NoiseReduction_Response::_internal_image_vector() const {
  return image_vector_.Get();
}
inline void NoiseReduction_Response::_internal_set_image_vector(const std::string& value) {
  
  image_vector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void NoiseReduction_Response::set_image_vector(std::string&& value) {
  
  image_vector_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:NoiseReduction_Response.image_vector)
}
inline void NoiseReduction_Response::set_image_vector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_vector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:NoiseReduction_Response.image_vector)
}
inline void NoiseReduction_Response::set_image_vector(const void* value,
    size_t size) {
  
  image_vector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:NoiseReduction_Response.image_vector)
}
inline std::string* NoiseReduction_Response::_internal_mutable_image_vector() {
  
  return image_vector_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* NoiseReduction_Response::release_image_vector() {
  // @@protoc_insertion_point(field_release:NoiseReduction_Response.image_vector)
  return image_vector_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void NoiseReduction_Response::set_allocated_image_vector(std::string* image_vector) {
  if (image_vector != nullptr) {
    
  } else {
    
  }
  image_vector_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_vector,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:NoiseReduction_Response.image_vector)
}
inline std::string* NoiseReduction_Response::unsafe_arena_release_image_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:NoiseReduction_Response.image_vector)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_vector_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void NoiseReduction_Response::unsafe_arena_set_allocated_image_vector(
    std::string* image_vector) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_vector != nullptr) {
    
  } else {
    
  }
  image_vector_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_vector, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:NoiseReduction_Response.image_vector)
}

// -------------------------------------------------------------------

// Feature_Etraction_Request

// float longitude = 1;
inline void Feature_Etraction_Request::clear_longitude() {
  longitude_ = 0;
}
inline float Feature_Etraction_Request::_internal_longitude() const {
  return longitude_;
}
inline float Feature_Etraction_Request::longitude() const {
  // @@protoc_insertion_point(field_get:Feature_Etraction_Request.longitude)
  return _internal_longitude();
}
inline void Feature_Etraction_Request::_internal_set_longitude(float value) {
  
  longitude_ = value;
}
inline void Feature_Etraction_Request::set_longitude(float value) {
  _internal_set_longitude(value);
  // @@protoc_insertion_point(field_set:Feature_Etraction_Request.longitude)
}

// float latitude = 2;
inline void Feature_Etraction_Request::clear_latitude() {
  latitude_ = 0;
}
inline float Feature_Etraction_Request::_internal_latitude() const {
  return latitude_;
}
inline float Feature_Etraction_Request::latitude() const {
  // @@protoc_insertion_point(field_get:Feature_Etraction_Request.latitude)
  return _internal_latitude();
}
inline void Feature_Etraction_Request::_internal_set_latitude(float value) {
  
  latitude_ = value;
}
inline void Feature_Etraction_Request::set_latitude(float value) {
  _internal_set_latitude(value);
  // @@protoc_insertion_point(field_set:Feature_Etraction_Request.latitude)
}

// bytes image_vector = 3;
inline void Feature_Etraction_Request::clear_image_vector() {
  image_vector_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Feature_Etraction_Request::image_vector() const {
  // @@protoc_insertion_point(field_get:Feature_Etraction_Request.image_vector)
  return _internal_image_vector();
}
inline void Feature_Etraction_Request::set_image_vector(const std::string& value) {
  _internal_set_image_vector(value);
  // @@protoc_insertion_point(field_set:Feature_Etraction_Request.image_vector)
}
inline std::string* Feature_Etraction_Request::mutable_image_vector() {
  // @@protoc_insertion_point(field_mutable:Feature_Etraction_Request.image_vector)
  return _internal_mutable_image_vector();
}
inline const std::string& Feature_Etraction_Request::_internal_image_vector() const {
  return image_vector_.Get();
}
inline void Feature_Etraction_Request::_internal_set_image_vector(const std::string& value) {
  
  image_vector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Feature_Etraction_Request::set_image_vector(std::string&& value) {
  
  image_vector_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:Feature_Etraction_Request.image_vector)
}
inline void Feature_Etraction_Request::set_image_vector(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  image_vector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:Feature_Etraction_Request.image_vector)
}
inline void Feature_Etraction_Request::set_image_vector(const void* value,
    size_t size) {
  
  image_vector_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:Feature_Etraction_Request.image_vector)
}
inline std::string* Feature_Etraction_Request::_internal_mutable_image_vector() {
  
  return image_vector_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Feature_Etraction_Request::release_image_vector() {
  // @@protoc_insertion_point(field_release:Feature_Etraction_Request.image_vector)
  return image_vector_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Feature_Etraction_Request::set_allocated_image_vector(std::string* image_vector) {
  if (image_vector != nullptr) {
    
  } else {
    
  }
  image_vector_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), image_vector,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:Feature_Etraction_Request.image_vector)
}
inline std::string* Feature_Etraction_Request::unsafe_arena_release_image_vector() {
  // @@protoc_insertion_point(field_unsafe_arena_release:Feature_Etraction_Request.image_vector)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return image_vector_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Feature_Etraction_Request::unsafe_arena_set_allocated_image_vector(
    std::string* image_vector) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (image_vector != nullptr) {
    
  } else {
    
  }
  image_vector_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      image_vector, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Feature_Etraction_Request.image_vector)
}

// -------------------------------------------------------------------

// Feature_Etraction_Response

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_sar_5fapplication_2eproto
